
<div id="comments-list">
    <div>
        <h2 style="text-align: center;">댓글 목록</h2>
    </div>
    {{#commentDtos}}
        <div class="card m-2" id="comments-{{id}}">
        <div class="card-header">
            {{nickname}}
            <!--댓글 삭제 버튼-->
            <button type="button" class="btn btn-sm btn-outline-danger comment-delete-btn" style="float:right;"
                    data-comment-id="{{id}}">
                삭제
            </button>

            <!--모달 트리거 버튼-->
            <button type="button" class="btn btn-sm btn-outline-primary" style="float:right; margin-right:5px;" data-bs-toggle="modal" data-bs-target="#comment-edit-modal"
                data-bs-id="{{id}}"
                data-bs-nickname="{{nickname}}"
                data-bs-body="{{body}}"
                data-bs-article-id="{{articleId}}">
                수정
            </button>


            <div style="clear:both;"></div>
        </div>
        <div class="card-body">
            {{body}}
        </div>
        </div>
    {{/commentDtos}}
</div>

<!-- Modal (댓글 수정)-->
<div class="modal fade" id="comment-edit-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">댓글 수정</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- 댓글 수정 폼 -->
                <form>
                    <!-- 닉네임 입력 -->
                    <div class="mb-3">
                        <label class="form-label">닉네임</label>
                        <input class="form-control form-control-sm" id="edit-comment-nickname">
                    </div>
                    <!-- 댓글 본문 입력 -->
                    <div class="mb-3">
                        <label class="form-label">댓글 내용</label>
                        <textarea class="form-control form-control-sm" rows="3" id="edit-comment-body"></textarea>
                    </div>
                    <!-- 히든 인풋 -->
                    {{#article}}
                        <input type="hidden" id="edit-comment-id" >
                        <input type="hidden" id="edit-comment-article-id" >
                    {{/article}}
                    <!-- 전송 버튼 -->
                    <button type="button" class="btn btn-primary" id="comment-update-btn">수정 완료</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--모달 이벤트 처리 (댓글 수정)-->
<script>
{
    // 모달 요소 선택
    const commentEditModal= document.querySelector("#comment-edit-modal");

    // 모달 이벤트 감지
    commentEditModal.addEventListener("show.bs.modal", function(event) {
        // 트리거 버튼(수정 버튼) 선택
        const triggerBtn = event.relatedTarget;

        // 데이터 가져오기
        const id = triggerBtn.getAttribute("data-bs-id");
        const nickname = triggerBtn.getAttribute("data-bs-nickname");
        const body = triggerBtn.getAttribute("data-bs-body");
        const articleId = triggerBtn.getAttribute("data-bs-article-id");

        // 데이터 반영하기
        document.querySelector("#edit-comment-nickname").value = nickname;
        document.querySelector("#edit-comment-body").value = body;
        document.querySelector("#edit-comment-id").value = id;
        document.querySelector("#edit-comment-article-id").value = articleId;

    });
}

{
    // 수정 완료 버튼 클릭!
    const commentUpdateBtn = document.querySelector("#comment-update-btn");

   // 클릭 이벤트 감지 및 처리
   commentUpdateBtn.addEventListener("click", function() {
        // 1. 수정 댓글 겍체 생성
        const comment = {
            id: document.querySelector("#edit-comment-id").value,
            nickname: document.querySelector("#edit-comment-nickname").value,
            body: document.querySelector("#edit-comment-body").value,
            article_id: document.querySelector("#edit-comment-article-id").value
        };
        console.log(comment);

        // 2. fetch() - 수정 REST API 호출
        const url = "/api/comments/" + comment.id;
        fetch(url, {
            method: "PATCH",                         // PATCH 요청을 보낼거다.
            body: JSON.stringify(comment),          // comment JS 객체(수정된 댓글)을 JSON 으로 바꿔서 보낸다.
            headers: {
                "Content-Type": "application/json" // body 에 실어서 보낸게 application/json 타입이다. (여기 안에는 json 이 들어있엉)
            }
        }).then(response => {
            // http 응답 코드에 따른 메세지 출력
            const msg = (response.ok)? "댓글이 수정되었습니다." : "댓글 수정 실패!";
            alert(msg);

            // 현재 페이지 새로고침침
            window.location.reload();

         });


   });
}
</script>

<!-- 이벤트 처리 (댓글 삭제) -->
<script>
{
    // 삭제 버튼 선택
    const commentDeleteBtns = document.querySelectorAll(".comment-delete-btn");

    // 삭제 버튼 이벤트를 처리
    commentDeleteBtns.forEach(btn => {

        // 각 버튼의 이벤트 처리 등록
        btn.addEventListener("click", (event) => {
            // 버튼 클릭을 했을 때 댓글의 id 를 가져오게 해야함!!!

            // 1. 이벤트 발생 요소 선택 (클릭 이벤트가 발생된 버튼을 가져옴)
            const commentDeleteBtn= event.srcElement; // event.target 과 같음

            // 2. 삭제 댓글 id 가져오기
            const commentId = commentDeleteBtn.getAttribute("data-comment-id");
            console.log(`삭제 버튼 클릭: ${commentId}번 댓글`); // 백틱 사용!

            // 3. 삭제 API 호출 및 처리
            const url = `/api/comments/${commentId}`;
            fetch(url,{
                method: "DELETE",   // DELETE 요청을 보낼거다.

            }).then(response => {
                // 댓글 삭제 실패 처리
                if (!response.ok){
                    alert("댓글 삭제 실패...!");
                    return;
                }

                // 삭제 성공 시, 댓글을 화면에서 지움!
                const target = document.querySelector(`#comments-${commentId}`);
                target.remove();
            });
        });
    });
}
</script>